name: Build and Release

on:
  push:
    tags:
      - "v*"   # Triggers only when you push a tag starting with "v"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4


      # Linux build with CMake
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ cmake zip libcurl4-openssl-dev nlohmann-json3-dev

      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -S . -B build

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake --build build --config Release
          mv build/app app
          mv SteamAPI/linux64/libsteam_api.so libsteam_api.so
          zip -r app-${{ matrix.os }}.zip app libsteam_api.so

      # Windows build with CMake
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install cmake -y
          choco install zip -y
          choco install mingw -y
          curl -LO https://curl.se/windows/dl-8.8.0_2/curl-8.8.0_2-win64-mingw.zip
          unzip curl-8.8.0_2-win64-mingw.zip -d curl-win
          mkdir -p ./curl/include ./curl/lib
          cp -r curl-win/curl-8.8.0_2-win64-mingw/include/curl ./curl/include/
          cp curl-win/curl-8.8.0_2-win64-mingw/lib/libcurl.dll.a ./curl/lib/
          cp curl-win/curl-8.8.0_2-win64-mingw/lib/libcurl.dll.a ./curl/lib/libcurl.a
          mkdir -p ./include/nlohmann
          if [ ! -f ./include/nlohmann/json.hpp ]; then
            curl -L -o ./include/nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp
          fi

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cmake -S . -B build -G "MinGW Makefiles"

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cmake --build build --config Release
          mv build/app.exe app.exe
          mv SteamAPI/win64/steam_api64.dll steam_api64.dll
          cp curl-win/curl-8.8.0_2-win64-mingw/bin/libcurl-x64.dll ./libcurl-x64.dll
          zip -r app-${{ matrix.os }}.zip app.exe steam_api64.dll libcurl-x64.dll cacert.pem

      # Upload build artifacts (unchanged)

      # Upload build artifacts
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: app*.zip
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-files

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-files/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
