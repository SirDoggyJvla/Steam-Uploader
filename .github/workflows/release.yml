name: Build and Release

on:
  push:
    tags:
      - "v*"   # Triggers only when you push a tag starting with "v"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      # Get dependencies
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ cmake ninja-build zip libcurl4-openssl-dev nlohmann-json3-dev
          
          git clone https://github.com/Microsoft/vcpkg.git
          cd ./vcpkg && ./bootstrap-vcpkg.sh
          cd ..

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd ./packages
          git clone https://github.com/gabime/spdlog
          git clone https://github.com/curl/curl
          git clone https://github.com/nlohmann/json
          git clone https://github.com/jarro2783/cxxopts
          cd ..

        # choco install curl
        # choco install cmake -y
          # choco install mingw -y

          # git clone https://github.com/Microsoft/vcpkg.git
          # cd ./vcpkg && ./bootstrap-vcpkg.bat
          # cd ..

      # Build
      - name: Build on Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release
          cmake --build build

      # Windows build
      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p build/bin
          g++ -O2 $(find ./src -name '*.cpp') \
            -o ./build/bin/SteamUploader.exe \
            -I. \
            -I./packages/steam/public \
            -I./packages/spdlog/include \
            -I./packages/curl/include \
            -I./packages/json/single_include \
            -I./packages/cxxopts/include \
            -L./packages/steam/redistributable_bin/win64 -lsteam_api64 \
            -L./packages/lib -lcurl \
            -lws2_32 -lwldap32 -lwinmm -lcrypt32 \
            -Wl,-rpath,'$ORIGIN/packages/steam/redistributable_bin/win64' \
            -static-libgcc -static-libstdc++ \
            -pthread \
            -DPROJECT_NAME="\"SteamUploader\"" \
            -DPROJECT_DESCRIPTION="\"A CLI tool to update UGC on the Steam workshop\"" \
            -DPROJECT_VERSION="\"0.6.0\"" \
            -DPROJECT_VERSION_MAJOR=0 \
            -DPROJECT_VERSION_MINOR=6 \
            -DPROJECT_VERSION_PATCH=0

      # Move and zip built files
      - name: Move and zip built files for Windows
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Compress-Archive -Path build/bin/SteamUploader.exe, packages/steam/redistributable_bin/win64/steam_api64.dll -DestinationPath "build/bin/SteamUploader-${{ matrix.os }}.zip"

      - name: Move and zip built files for Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd build/bin
          zip -j SteamUploader-${{ matrix.os }}.zip *

      # Upload build artifacts
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: SteamUploader-${{ matrix.os }}
          path: build/bin/SteamUploader*.zip
          if-no-files-found: error

      # - name: Setup tmate session
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3


  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-files

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-files/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
