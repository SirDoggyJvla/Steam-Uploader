name: Build and Release

on:
  push:
    tags:
      - "v*"   # Triggers only when you push a tag starting with "v"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      # Linux build
      - name: Build on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ make zip libcurl4-openssl-dev nlohmann-json3-dev
          make
          mv ./app ./app-${{ matrix.os }}
          zip -r app-${{ matrix.os }}.zip app-${{ matrix.os }} SteamAPI/linux64/libsteam_api.so

      # Windows: Download and extract curl development files
      - name: Download curl for Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          curl -LO https://curl.se/windows/dl-8.8.0_2/curl-8.8.0_2-win64-mingw.zip
          unzip curl-8.8.0_2-win64-mingw.zip -d curl-win
          # Copy include and lib to expected locations
          mkdir -p ./curl/include ./curl/lib
          cp -r curl-win/curl-8.8.0_2-win64-mingw/include/curl ./curl/include/
          cp curl-win/curl-8.8.0_2-win64-mingw/lib/libcurl.dll.a ./curl/lib/
          cp curl-win/curl-8.8.0_2-win64-mingw/bin/libcurl-x64.dll ./  # Correct DLL name
      # Windows build
      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Download nlohmann/json single header if not present
          mkdir -p ./include/nlohmann
          if [ ! -f ./include/nlohmann/json.hpp ]; then
            curl -L -o ./include/nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp
          fi
          # Ensure libcurl.a exists for MinGW linker
          cp ./curl/lib/libcurl.dll.a ./curl/lib/libcurl.a
          g++ -g $(find ./src -name '*.cpp') \
            -o ./app-${{ matrix.os }}.exe \
            -I. -I./include -I./curl/include \
            -L./SteamAPI/win64 -L./curl/lib -lsteam_api64 -lcurl \
            -Wl,-rpath,'$ORIGIN/SteamAPI/win64' \
            -static-libgcc -static-libstdc++ -static \
            -pthread
        # Create zip using PowerShell
      - name: Zip Windows build
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path app-${{ matrix.os }}.exe, SteamAPI/win64/steam_api64.dll, libcurl-x64.dll, cacert.pem -DestinationPath app-${{ matrix.os }}.zip

      # Upload build artifacts
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: app*.zip
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-files

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-files/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
